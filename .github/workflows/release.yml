name: Release

on:
  # Trigger on push to master branch
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  
  # Trigger on pull requests targeting master branch
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: x86_64-pc-windows-msvc

      # Use the more efficient Rust caching
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
          shared-key: "rust-windows-release"
          cache-directories: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          cache-on-failure: true

      # Fast check to catch errors early without full compilation
      - name: Check code
        run: cargo check --all-targets
        env:
          CARGO_INCREMENTAL: 0

      # Install trippy for use in our package
      - name: Install trippy
        run: |
          echo "Installing trippy..."
          cargo install trippy
          
          # Verify installation and find location (trippy installs as trip.exe on Windows)
          $trippyPath = "$env:USERPROFILE\.cargo\bin\trip.exe"
          
          if (Test-Path $trippyPath) {
            echo "Trippy successfully installed as trip.exe at: $trippyPath"
            echo "TRIPPY_PATH=$trippyPath" >> $env:GITHUB_ENV
          } else {
            # Try to find it using where command as fallback
            try {
              $whereResult = where.exe trip
              if ($whereResult) {
                echo "Found trip.exe via where command at: $whereResult"
                echo "TRIPPY_PATH=$whereResult" >> $env:GITHUB_ENV
              } else {
                throw "trip.exe not found via where command"
              }
            } catch {
              Write-Error "Could not find trip.exe executable after installation. Please check PATH variables and cargo installation."
              exit 1
            }
          }
        shell: pwsh
        env:
          CARGO_INCREMENTAL: 0
          
      # Run the tests
      - name: Run tests
        run: cargo test --all
        env:
          CARGO_INCREMENTAL: 0

      # Build the release binary with explicit binary name
      - name: Build release binary
        run: cargo build --release --bin mtr --target x86_64-pc-windows-msvc
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C target-feature=+crt-static"

      # Check build output and list files in target directory for debugging
      - name: Check build output
        run: |
          echo "Checking for binary in target directories..."
          
          # Check standard target directory
          if (Test-Path "target/release") {
            echo "Contents of target/release:"
            Get-ChildItem -Path "target/release" -Filter "*.exe"
          }
          
          # Check target-specific directory
          if (Test-Path "target/x86_64-pc-windows-msvc/release") {
            echo "Contents of target/x86_64-pc-windows-msvc/release:"
            Get-ChildItem -Path "target/x86_64-pc-windows-msvc/release" -Filter "*.exe"
          }
          
          # Also check with slashes in other direction
          if (Test-Path "target\release") {
            echo "Contents of target\release:"
            Get-ChildItem -Path "target\release" -Filter "*.exe"
          }
          
          # Check target-specific directory with backslashes
          if (Test-Path "target\x86_64-pc-windows-msvc\release") {
            echo "Contents of target\x86_64-pc-windows-msvc\release:"
            Get-ChildItem -Path "target\x86_64-pc-windows-msvc\release" -Filter "*.exe"
          }
        shell: pwsh

      # New step: Verify the binary works correctly
      - name: Verify binary functionality
        run: |
          echo "Verifying binary functionality..."
          $ErrorActionPreference = "Stop"
          # Test help output
          $helpOutput = & ./target/x86_64-pc-windows-msvc/release/mtr.exe --help
          if (-not ($helpOutput -match "Usage:" -and $helpOutput -match "Arguments:" -and $helpOutput -match "Options:")) {
            Write-Error "Help output verification failed"
            exit 1
          }
          echo "✓ Help command verified"
          
          # Test version output
          $versionOutput = & ./target/x86_64-pc-windows-msvc/release/mtr.exe --version
          if (-not ($versionOutput -match "mtr ")) {
            Write-Error "Version output verification failed"
            exit 1
          }
          echo "✓ Version command verified"
          
          # Test basic command-line argument parsing (without network activity)
          try {
            Start-Process -FilePath "./target/x86_64-pc-windows-msvc/release/mtr.exe" -ArgumentList "-T", "-P", "443", "-c", "1", "-n", "--help" -NoNewWindow -Wait
            echo "✓ Command-line argument parsing verified"
          } catch {
            Write-Error "Command-line argument parsing test failed: $_"
            exit 1
          }
          
          echo "All binary verification tests passed successfully!"
        shell: pwsh

      # Find and copy trippy executable for bundling 
      - name: Find trippy executable for bundling
        id: find_trippy
        run: |
          $trippyPath = "$env:USERPROFILE\.cargo\bin\trip.exe"
          
          if (Test-Path $trippyPath) {
            echo "Found trippy at: $trippyPath"
            echo "TRIPPY_PATH=$trippyPath" >> $env:GITHUB_ENV
          } else {
            Write-Error "Could not find trippy executable to bundle"
            exit 1
          }
        shell: pwsh

  # Only run for tag pushes (real releases)
  release:
    name: Create Release
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    # Add explicit permissions for creating releases
    permissions:
      contents: write  # Required for creating releases and uploading assets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: x86_64-pc-windows-msvc

      # Use the more efficient Rust caching
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}
          shared-key: "rust-windows-release"
          cache-directories: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          cache-on-failure: true

      # Install trippy for packaging
      - name: Install trippy
        run: |
          echo "Installing trippy..."
          cargo install trippy
          
          # Verify installation and find location (trippy installs as trip.exe on Windows)
          $trippyPath = "$env:USERPROFILE\.cargo\bin\trip.exe"
          
          if (Test-Path $trippyPath) {
            echo "Trippy successfully installed as trip.exe at: $trippyPath"
            echo "TRIPPY_PATH=$trippyPath" >> $env:GITHUB_ENV
          } else {
            # Try to find it using where command as fallback
            try {
              $whereResult = where.exe trip
              if ($whereResult) {
                echo "Found trip.exe via where command at: $whereResult"
                echo "TRIPPY_PATH=$whereResult" >> $env:GITHUB_ENV
              } else {
                throw "trip.exe not found via where command"
              }
            } catch {
              Write-Error "Could not find trip.exe executable after installation. Please check PATH variables and cargo installation."
              exit 1
            }
          }
        shell: pwsh
        env:
          CARGO_INCREMENTAL: 0
      
      # Find the trippy executable
      - name: Find trippy executable
        id: find_trippy
        run: |
          $trippyPath = "$env:USERPROFILE\.cargo\bin\trip.exe"
          
          if (Test-Path $trippyPath) {
            echo "Found trippy at: $trippyPath"
            echo "TRIPPY_PATH=$trippyPath" >> $env:GITHUB_ENV
          } else {
            Write-Error "Could not find trippy executable to bundle"
            exit 1
          }
        shell: pwsh

      # Create package directory structure and dist directory
      - name: Create directories
        run: |
          mkdir -p dist
          mkdir -p windows-mtr-official
        shell: pwsh

      # Create a standalone executable ZIP
      - name: Create official distribution package
        run: |
          # Build the release binary explicitly first
          cargo build --release --bin mtr --target x86_64-pc-windows-msvc
          
          # Check for binary in different locations and list them for debugging
          Write-Host "Searching for the MTR executable..."
          
          $possiblePaths = @(
            "target/x86_64-pc-windows-msvc/release/mtr.exe",
            "target/release/mtr.exe",
            "target\x86_64-pc-windows-msvc\release\mtr.exe", 
            "target\release\mtr.exe"
          )
          
          $mtrPath = $null
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              Write-Host "Found MTR binary at: $path"
              $mtrPath = $path
              break
            }
          }
          
          # If binary not found, look more broadly
          if ($null -eq $mtrPath) {
            Write-Host "Binary not found in expected paths, searching in target directories..."
            
            # Look for any .exe files in target/release or target/x86_64-pc-windows-msvc/release
            $exeFiles = @()
            $exeFiles += Get-ChildItem -Path "target/release" -Filter "*.exe" -ErrorAction SilentlyContinue
            $exeFiles += Get-ChildItem -Path "target/x86_64-pc-windows-msvc/release" -Filter "*.exe" -ErrorAction SilentlyContinue
            $exeFiles += Get-ChildItem -Path "target\release" -Filter "*.exe" -ErrorAction SilentlyContinue
            $exeFiles += Get-ChildItem -Path "target\x86_64-pc-windows-msvc\release" -Filter "*.exe" -ErrorAction SilentlyContinue
            
            foreach ($file in $exeFiles) {
              Write-Host "Found executable: $($file.FullName)"
            }
            
            # If we found any .exe files, use the first one
            if ($exeFiles.Count -gt 0) {
              $mtrPath = $exeFiles[0].FullName
              Write-Host "Using: $mtrPath"
            } else {
              Write-Error "No MTR executable found after build"
              exit 1
            }
          }
          
          # Create directories
          New-Item -ItemType Directory -Path 'dist' -Force
          New-Item -ItemType Directory -Path 'windows-mtr-official' -Force
          
          # Copy the executable
          Copy-Item $mtrPath windows-mtr-official/windows-mtr.exe
          Copy-Item "${{ env.TRIPPY_PATH }}" windows-mtr-official/trippy.exe
          
          # Add a simple README
          @"
          Windows MTR by Benji Shohet (benjisho)
          -------------------------------------
          
          A Windows-native clone of Linux MTR for network path diagnostics.
          
          Instructions:
          1. Make sure both windows-mtr.exe and trippy.exe are in the same directory
          2. Run windows-mtr.exe from command prompt or PowerShell
          
          Example commands:
          windows-mtr 8.8.8.8            # Basic ICMP trace to Google DNS
          windows-mtr -T -P 443 github.com  # TCP trace to GitHub (HTTPS)
          windows-mtr -r -c 10 example.com  # Generate report with 10 pings
          
          For more information see: https://github.com/benjisho/windows-mtr
          "@ > windows-mtr-official/README.txt
          
          # Create the official ZIP package
          Compress-Archive -Path "windows-mtr-official\*" -DestinationPath "dist\windows-mtr-official.zip" -Force
          
          # Generate SHA256 checksums for the zip file
          $hash = Get-FileHash -Path "dist\windows-mtr-official.zip" -Algorithm SHA256
          Set-Content -Path "dist\SHA256SUM" -Value "$($hash.Hash)  windows-mtr-official.zip"
        shell: pwsh

      # Upload all artifacts to GitHub
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-mtr-release
          path: dist/windows-mtr-official.zip
          if-no-files-found: error
          compression-level: 9

      # Create the GitHub release with only the official zip file
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/windows-mtr-official.zip
          name: Windows MTR ${{ github.ref_name }}
          body: |
            # Windows MTR ${{ github.ref_name }}
            
            A Windows-native clone of Linux MTR for network path diagnostics.
            
            ## Download
            
            [**windows-mtr-official.zip**](https://github.com/benjisho/windows-mtr/releases/download/${{ github.ref_name }}/windows-mtr-official.zip) - Contains Windows MTR executable and trippy dependency
            
            ## Installation
            
            1. Download and extract the zip file
            2. Make sure both executables remain in the same directory
            3. Run `windows-mtr.exe` from command prompt or PowerShell
            
            ## Usage
            
            ```
            # Basic usage
            windows-mtr 8.8.8.8
            
            # TCP mode (for HTTPS)
            windows-mtr -T -P 443 example.com
            
            # Report mode (no live updates)
            windows-mtr -r -c 10 google.com
            ```
            
            See [USAGE.md](https://github.com/benjisho/windows-mtr/blob/main/USAGE.md) for complete documentation.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}