name: Release

on:
  # Trigger on push to master branch
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  
  # Trigger on pull requests targeting master branch
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: x86_64-pc-windows-msvc

      # Use the more efficient Rust caching
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') }}

      # Fast check to catch errors early without full compilation
      - name: Check code
        run: cargo check --all-targets
        env:
          CARGO_INCREMENTAL: 0

      # Install trippy for use in our package
      - name: Install trippy
        run: cargo install trippy
        env:
          CARGO_INCREMENTAL: 0
          
      # Run the tests
      - name: Run tests
        run: cargo test --all
        env:
          CARGO_INCREMENTAL: 0

      # Build the release binary
      - name: Build release binary
        run: cargo build --release --target x86_64-pc-windows-msvc
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C target-feature=+crt-static"

      # New step: Verify the binary works correctly
      - name: Verify binary functionality
        run: |
          echo "Verifying binary functionality..."
          $ErrorActionPreference = "Stop"
          # Test help output
          $helpOutput = & ./target/x86_64-pc-windows-msvc/release/mtr.exe --help
          if (-not ($helpOutput -match "Usage:" -and $helpOutput -match "Arguments:" -and $helpOutput -match "Options:")) {
            Write-Error "Help output verification failed"
            exit 1
          }
          echo "✓ Help command verified"
          
          # Test version output
          $versionOutput = & ./target/x86_64-pc-windows-msvc/release/mtr.exe --version
          if (-not ($versionOutput -match "mtr ")) {
            Write-Error "Version output verification failed"
            exit 1
          }
          echo "✓ Version command verified"
          
          # Test basic command-line argument parsing (without network activity)
          try {
            Start-Process -FilePath "./target/x86_64-pc-windows-msvc/release/mtr.exe" -ArgumentList "-T", "-P", "443", "-c", "1", "-n", "--help" -NoNewWindow -Wait
            echo "✓ Command-line argument parsing verified"
          } catch {
            Write-Error "Command-line argument parsing test failed: $_"
            exit 1
          }
          
          echo "All binary verification tests passed successfully!"
        shell: pwsh

      # Find and copy trippy executable for bundling 
      - name: Find trippy executable for bundling
        id: find_trippy
        run: |
          $trippyPath = "$env:USERPROFILE\.cargo\bin\trippy.exe"
          
          if (Test-Path $trippyPath) {
            echo "Found trippy at: $trippyPath"
            echo "TRIPPY_PATH=$trippyPath" >> $env:GITHUB_ENV
          } else {
            Write-Error "Could not find trippy executable to bundle"
            exit 1
          }
        shell: pwsh

      # For PRs and normal pushes, only upload artifacts for testing
      - name: Package test artifacts
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/'))
        run: |
          mkdir -p dist
          cp target/x86_64-pc-windows-msvc/release/mtr.exe dist/windows-mtr.exe
          cp "${{ env.TRIPPY_PATH }}" dist/trippy.exe
          cp README.md LICENSE USAGE.md dist/
          
          # Create a simple batch file to install both binaries
          @"
          @echo off
          echo Installing Windows MTR...
          if not exist "%PROGRAMFILES%\Windows-MTR" mkdir "%PROGRAMFILES%\Windows-MTR"
          copy /Y windows-mtr.exe "%PROGRAMFILES%\Windows-MTR\"
          copy /Y trippy.exe "%PROGRAMFILES%\Windows-MTR\"
          copy /Y README.md "%PROGRAMFILES%\Windows-MTR\"
          copy /Y LICENSE "%PROGRAMFILES%\Windows-MTR\"
          copy /Y USAGE.md "%PROGRAMFILES%\Windows-MTR\"
          
          echo Creating shortcuts...
          powershell -Command "$ws = New-Object -ComObject WScript.Shell; $s = $ws.CreateShortcut('%USERPROFILE%\Desktop\Windows MTR.lnk'); $s.TargetPath = '%PROGRAMFILES%\Windows-MTR\windows-mtr.exe'; $s.Save()"
          
          echo Adding to PATH...
          setx PATH "%PATH%;%PROGRAMFILES%\Windows-MTR"
          
          echo Installation complete! You can now run windows-mtr from any command prompt.
          "@ > dist/install.bat
          
          # Create a simple verification script
          @"
          @echo off
          echo Windows MTR Verification
          echo =======================
          echo.
          cd /d "%~dp0"
          
          echo Testing if trippy is accessible...
          if exist trippy.exe (
            echo ✓ Trippy executable found
          ) else (
            echo ✗ Trippy executable missing
            exit /b 1
          )
          
          echo Testing if windows-mtr is accessible...
          if exist windows-mtr.exe (
            echo ✓ Windows MTR executable found
          ) else (
            echo ✗ Windows MTR executable missing
            exit /b 1
          )
          
          echo.
          echo All verification tests passed!
          "@ > dist/verify.bat
        shell: pwsh

      - name: Upload test artifacts
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/'))
        uses: actions/upload-artifact@v4
        with:
          name: windows-mtr-test-build
          path: dist/
          retention-days: 14
          if-no-files-found: error
          compression-level: 9
          overwrite: true

  # Only run for tag pushes (real releases)
  release:
    name: Create Release
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: x86_64-pc-windows-msvc
          components: clippy

      # Use improved caching
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-pc-windows-msvc

      # Rest of the job unchanged
      - name: Package distribution
        run: |
          mkdir -p dist
          cp target/x86_64-pc-windows-msvc/release/mtr.exe dist/windows-mtr.exe
          cp target/x86_64-pc-windows-msvc/release/mtr.exe dist/mtr.exe
          cp README.md LICENSE USAGE.md dist/
        shell: bash

      - name: Create ZIP package
        run: |
          Compress-Archive -Path dist/* -DestinationPath dist/windows-mtr.zip -Force
        shell: pwsh

      - name: Generate checksums
        run: |
          cd dist
          Get-FileHash -Algorithm SHA256 windows-mtr.exe | ForEach-Object {$_.Hash + "  windows-mtr.exe"} | Out-File -FilePath SHA256SUMS -Encoding utf8
          Get-FileHash -Algorithm SHA256 mtr.exe | ForEach-Object {$_.Hash + "  mtr.exe"} | Out-File -FilePath SHA256SUMS -Encoding utf8 -Append
          Get-FileHash -Algorithm SHA256 windows-mtr.zip | ForEach-Object {$_.Hash + "  windows-mtr.zip"} | Out-File -FilePath SHA256SUMS -Encoding utf8 -Append
        shell: pwsh
        
      - name: Create self-contained installer
        run: |
          # Using simple batch file approach for installer
          echo '@echo off' > dist/install.bat
          echo 'echo Installing Windows MTR...' >> dist/install.bat
          echo 'if not exist "%PROGRAMFILES%\Windows-MTR" mkdir "%PROGRAMFILES%\Windows-MTR"' >> dist/install.bat
          echo 'copy /Y mtr.exe "%PROGRAMFILES%\Windows-MTR\"' >> dist/install.bat
          echo 'copy /Y windows-mtr.exe "%PROGRAMFILES%\Windows-MTR\"' >> dist/install.bat
          echo 'copy /Y README.md "%PROGRAMFILES%\Windows-MTR\"' >> dist/install.bat
          echo 'copy /Y LICENSE "%PROGRAMFILES%\Windows-MTR\"' >> dist/install.bat
          echo 'copy /Y USAGE.md "%PROGRAMFILES%\Windows-MTR\"' >> dist/install.bat
          echo 'echo Creating shortcuts...' >> dist/install.bat
          echo 'powershell -Command "$ws = New-Object -ComObject WScript.Shell; $s = $ws.CreateShortcut(''%USERPROFILE%\Desktop\Windows MTR.lnk''); $s.TargetPath = ''%PROGRAMFILES%\Windows-MTR\windows-mtr.exe''; $s.Save()"' >> dist/install.bat
          echo 'echo Adding to PATH...' >> dist/install.bat
          echo 'setx PATH "%PATH%;%PROGRAMFILES%\Windows-MTR"' >> dist/install.bat
          echo 'echo Installation complete! You can now run mtr from any command prompt.' >> dist/install.bat
          
          # Add to the ZIP
          Compress-Archive -Path dist/install.bat -Update -DestinationPath dist/windows-mtr.zip
        shell: pwsh

      # Create a simple ZIP package that includes just the executable for ease of use
      - name: Create standalone executable ZIP
        run: |
          mkdir -p standalone
          cp target/x86_64-pc-windows-msvc/release/mtr.exe standalone/
          Compress-Archive -Path standalone/mtr.exe -DestinationPath dist/mtr-standalone.zip -Force
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-mtr-release
          path: dist/

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/windows-mtr.exe
            dist/mtr.exe
            dist/windows-mtr.zip
            dist/mtr-standalone.zip
            dist/SHA256SUMS
            dist/install.bat
          name: Windows MTR v${{ github.ref_name }}
          body: |
            # Windows MTR v${{ github.ref_name }}
            
            A Windows-native clone of Linux MTR for network path diagnostics.
            
            ## Download Options
            
            ### For end users (Windows technicians):
            
            - **[mtr-standalone.zip](https://github.com/benjisho/windows-mtr/releases/download/${{ github.ref_name }}/mtr-standalone.zip)** - Just the executable, extract and run
            - **[windows-mtr.zip](https://github.com/benjisho/windows-mtr/releases/download/${{ github.ref_name }}/windows-mtr.zip)** - Complete package with installer and documentation
            - **Direct executable**: [mtr.exe](https://github.com/benjisho/windows-mtr/releases/download/${{ github.ref_name }}/mtr.exe)
            
            ### Installation:
            
            **Simple method:** Download and run `mtr.exe` directly - no installation needed!
            
            **With installer:** 
            1. Download windows-mtr.zip
            2. Extract the ZIP
            3. Run install.bat (may require administrator privileges)
            
            ## Verifying downloads
            
            SHA256 checksums are available in the [SHA256SUMS](https://github.com/benjisho/windows-mtr/releases/download/${{ github.ref_name }}/SHA256SUMS) file.
            
            ## Usage
            
            ```
            # Basic usage
            mtr 8.8.8.8
            
            # TCP mode (for HTTPS)
            mtr -T -P 443 example.com
            ```
            
            See [USAGE.md](https://github.com/benjisho/windows-mtr/blob/main/USAGE.md) for more examples.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}