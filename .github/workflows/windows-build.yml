name: Windows Build and Release

on:
  # Manually triggered from GitHub UI
  workflow_dispatch:
  
  # On release tag push
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build Windows Binary
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Build
        run: cargo build --release
        
      - name: Test
        run: cargo test
      
      - name: Create dist directory
        run: powershell -command "New-Item -ItemType Directory -Path 'dist' -Force"
      
      - name: Package binaries
        run: |
          # First check if binary exists in target-specific or standard path
          if (Test-Path "target\x86_64-pc-windows-msvc\release\mtr.exe") {
            $mtrPath = "target\x86_64-pc-windows-msvc\release\mtr.exe"
          } elseif (Test-Path "target\release\mtr.exe") {
            $mtrPath = "target\release\mtr.exe" 
          } else {
            # Run cargo build again to make sure we have a binary
            cargo build --release
            
            # Check again for the binary
            if (Test-Path "target\release\mtr.exe") {
              $mtrPath = "target\release\mtr.exe"
            } else {
              Write-Error "Could not find MTR executable after build"
              exit 1
            }
          }
          
          # Print the path we found
          Write-Host "Found MTR binary at: $mtrPath"
          
          # Create dist directory if it doesn't exist
          New-Item -ItemType Directory -Path 'dist' -Force
          
          # Copy the binary to dist
          Copy-Item $mtrPath dist\windows-mtr.exe
          
          # Create the ZIP package
          Push-Location dist
          
          # Use PowerShell to create a ZIP file
          Compress-Archive -Path 'windows-mtr.exe' -DestinationPath 'windows-mtr.zip' -Force
          
          # Also create a copy with the original name for convenience
          Copy-Item windows-mtr.exe mtr.exe
          Compress-Archive -Path @('mtr.exe', 'windows-mtr.exe', '..\README.md', '..\LICENSE', '..\USAGE.md') -DestinationPath 'windows-mtr-full.zip' -Force
          
          # Generate SHA-256 checksums
          $files = Get-ChildItem -Filter '*.zip'
          foreach ($file in $files) { 
            $hash = Get-FileHash -Path $file.FullName -Algorithm SHA256
            Add-Content -Path 'SHA256SUMS' -Value "$($hash.Hash)  $($file.Name)"
          }
          
          Pop-Location
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            dist/windows-mtr.exe
            dist/mtr.exe
            dist/*.zip
            dist/SHA256SUMS
          
  # Only run on tag push
  release:
    needs: build-windows
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases and uploading assets
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-binaries/windows-mtr.exe
            windows-binaries/*.zip
            windows-binaries/SHA256SUMS
          draft: true
          generate_release_notes: true
