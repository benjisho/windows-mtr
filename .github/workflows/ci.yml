name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        rust: [stable, 1.74.0]  # Test on stable and MSRV
      fail-fast: false  # Continue with other jobs if one fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy
          targets: x86_64-pc-windows-msvc

      # Use the advanced Rust caching action for better cache performance
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
          shared-key: "${{ matrix.os }}-${{ matrix.rust }}"

      # Run check first to catch compile errors early without full build
      - name: Check
        run: cargo check --all-targets
        env:
          CARGO_INCREMENTAL: 0
          
      # Run clippy before tests - catches many issues early
      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings
        env:
          CARGO_INCREMENTAL: 0

      # Build all targets with optimizations
      - name: Build
        run: cargo build --all-targets
        env:
          CARGO_INCREMENTAL: 0

      # Run tests with workspace-hack optimization
      - name: Run tests
        run: cargo test --all
        env:
          CARGO_INCREMENTAL: 0

  # New job to build binaries during pull requests for testing
  build-pr-binaries:
    name: Build PR Binaries
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: x86_64-pc-windows-msvc

      # Use advanced caching
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          save-if: false # Only save cache for main branch builds

      - name: Install trippy
        run: |
          echo "Installing trippy..."
          cargo install trippy
          
          # Verify installation and find location (trippy installs as trip.exe on Windows)
          $trippyPath = "$env:USERPROFILE\.cargo\bin\trip.exe"
          
          if (Test-Path $trippyPath) {
            echo "Trippy successfully installed as trip.exe at: $trippyPath"
            echo "TRIPPY_PATH=$trippyPath" >> $env:GITHUB_ENV
          } else {
            # Try to find it using where command as fallback
            try {
              $whereResult = where.exe trip
              if ($whereResult) {
                echo "Found trip.exe via where command at: $whereResult"
                echo "TRIPPY_PATH=$whereResult" >> $env:GITHUB_ENV
              } else {
                throw "trip.exe not found via where command"
              }
            } catch {
              Write-Error "Could not find trip.exe executable after installation. Please check PATH variables and cargo installation."
              exit 1
            }
          }
        shell: pwsh
        env:
          CARGO_INCREMENTAL: 0

      - name: Build release binary
        run: cargo build --release --target x86_64-pc-windows-msvc
        env:
          CARGO_INCREMENTAL: 0

      - name: Create test build directory
        run: |
          mkdir -p pr-build
          cp target/x86_64-pc-windows-msvc/release/mtr.exe pr-build/windows-mtr.exe
          cp README.md LICENSE USAGE.md pr-build/
        shell: bash

      - name: Create ZIP package
        run: |
          Compress-Archive -Path pr-build/* -DestinationPath pr-build/windows-mtr-PR${{ github.event.pull_request.number }}.zip -Force
        shell: pwsh
      
      - name: Upload PR build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-mtr-PR${{ github.event.pull_request.number }}
          path: |
            pr-build/*.exe
            pr-build/*.zip
          retention-days: 14
          
      - name: Comment on PR with download link
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const artifactName = `windows-mtr-PR${context.issue.number}`;
            const workflowRunId = context.runId;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            
            const downloadUrl = `https://github.com/${repoOwner}/${repoName}/actions/runs/${workflowRunId}/artifacts`;
            const comment = `### ðŸš€ PR Build Ready for Testing\n\n` +
                           `Binary artifacts for this PR have been built and are available for testing.\n\n` +
                           `[Download Windows MTR PR Build](${downloadUrl})`;
                           
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });